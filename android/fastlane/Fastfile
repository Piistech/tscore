# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)


def get_local_property(variable_name)
  local_properties_content = File.read("../local.properties")
  variable_match = local_properties_content.match(/^#{variable_name}=(.*)$/)
  
  if variable_match
    return variable_match[1]
  else
    UI.user_error!("Could not find #{variable_name} in local.properties")
  end
end


platform :android do

  
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  # desc "Submit a new Beta Build to Crashlytics Beta"
  # lane :beta do
  #   gradle(task: "clean assembleRelease")
  #   crashlytics
  
  #   # sh "your_script.sh"
  #   # You can also use other beta testing services here
  # end

  
  desc "Submit a new draft Build to Google Play Internal test"
  lane :internal_draft do 
    gradle(task: "clean") # is required in this case  
    gradle(task: "clean bundleRelease")
    Dir.chdir "../.." do sh("flutter", "clean") end # Call Flutter Build    
    # Build android app bundle (aab) file for Google Play Store release
    Dir.chdir "../.." do sh("flutter", "build", "appbundle", "--release", "--obfuscate", "--split-debug-info=build/app/outputs/symbols", "--shrink") end # Call Flutter Build

   
    # Get Flutter versionName and versionCode from local.properties
    version_name = get_local_property('flutter.versionName')
    version_code = get_local_property('flutter.versionCode')
    # package_name = get_local_property('flutter.applicationId')
    # Upload a new build to Google Play Internal test
    upload_to_play_store(
      track: 'internal',
      skip_upload_images: false,
      version_code: version_code,
      version_name: version_name,
      skip_upload_screenshots: true,
      # package_name: package_name,
      release_status: 'draft',
      json_key: './fastlane/fastlane-supply.json',
      aab: "../build/app/outputs/bundle/release/app-release.aab",
    )
    # supply(
    #   track: 'internal',
    #   json_key: '../android/fastlane/fastlane-supply.json',
    #   package_name: package_name,
    #   metadata_path: '../android/fastlane/metadata/',
    #   aab: "../build/app/outputs/bundle/release/app-release.aab",
    # )
     # slack              # Notify a channel
  end

  desc "Submit a new draft Build to Google Play Internal test"
  lane :internal do 
    gradle(task: "clean") # is required in this case  

    # gradle(task: "clean bundleRelease")
    
    Dir.chdir "../.." do sh("flutter", "clean") end # Call Flutter Build    
    
      # Build android app bundle (aab) file for Google Play Store release
    Dir.chdir "../.." do sh("flutter", "build", "appbundle", "--release","--obfuscate", "--split-debug-info=build/app/outputs/symbols", "--shrink") end # Call Flutter Build    
       
    # Get Flutter versionName and versionCode from local.properties
    version_name = get_local_property('flutter.versionName')
    version_code = get_local_property('flutter.versionCode')
    
    # Upload a new build to Google Play Internal test
    upload_to_play_store(
      track: 'internal',
      skip_upload_images: true,
      skip_upload_screenshots: true,
      version_code: version_code,
      version_name: version_name,
      release_status: 'completed',
      rollout: '1',
      json_key: './fastlane/fastlane-supply.json',
      in_app_update_priority: '5',
      aab: "../build/app/outputs/bundle/release/app-release.aab",
      mapping: "../build/app/outputs/mapping/release/mapping.txt",
    )
    # supply(
    #   track: 'internal',
    #   json_key: '../android/fastlane/fastlane-supply.json',
    #   package_name: package_name,
    #   metadata_path: '../android/fastlane/metadata/',
    #   aab: "../build/app/outputs/bundle/release/app-release.aab",
    # )
     # slack              # Notify a channel
  end

  

  desc "Submit a new draft Build to Google Play Closed Testing"
  lane :beta do    
    version_name = get_local_property('flutter.versionName')
    version_code = get_local_property('flutter.versionCode')
    upload_to_play_store(
      track: 'beta',#production, beta, alpha, internal
      skip_upload_images: true,
      version_code: version_code,
      version_name: version_name,
      skip_upload_screenshots: true,
      aab: "../build/app/outputs/bundle/release/app-release.aab",
    )
  end

  desc "Submit a new draft Build to Google Play Production"
  lane :production do  
    gradle(task: "clean") # is required in this case  
    # gradle(task: "clean bundleRelease")
    Dir.chdir "../.." do sh("flutter", "clean") end # Call Flutter Build    
    # Build android app bundle (aab) file for Google Play Store release
    Dir.chdir "../.." do sh("flutter", "build", "appbundle", "--release", "--obfuscate", "--split-debug-info=build/app/outputs/symbols", "--shrink") end # Call Flutter Build   
    version_name = get_local_property('flutter.versionName')
    version_code = get_local_property('flutter.versionCode')
    upload_to_play_store(
      track: 'production',#production, beta, alpha, internal
      skip_upload_images: true,
      version_code: version_code,
      version_name: version_name,
      skip_upload_screenshots: true,
      track_promote_to: 'production',
      in_app_update_priority: '5',
      rollout: '1',
      aab: "../build/app/outputs/bundle/release/app-release.aab",
    )
  end

  desc "Update metadata and images for all languages"
  lane :update_metadata  do
    version_codes = google_play_track_version_codes(track: "production")
    version_code = version_codes.first
    upload_to_play_store(
      # package_name: "totally.real.package",
      # track: "alpha",
      # track_promote_to: "beta",
      # deactivate_on_promote: false,
      # metadata_path: "fastlane/release/",
      skip_upload_apk: true,
      skip_upload_aab: true,
      skip_upload_metadata: false,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      skip_upload_changelogs: false,
      # skip_upload_whatsnews: false,
      # skip_upload_promo_graphics: false,
      # skip_upload_tv_banner: false,
      # skip_upload_tv_banner_landscape: false,
      # skip_upload_tv_promo_320x180: false,
      # skip_upload_tv_promo_320x240: false,
      # skip_upload_tv_promo_400x240: false,
      # skip_upload_tv_promo_480x270: false,
      # skip_upload_tv_promo_640x360: false,
      # skip_upload_tv_promo_640x480: false,
      # skip_upload_tv_promo_720x480: false,
      # skip_upload_tv_promo_1280x720: false,
      # skip_upload_tv_promo_1920x1080: false,
      # skip_upload_tv_promo_1920x1080_landscape: false,
      # skip_upload_wear: false,
      # skip_upload_wear_landscape: false,
      # skip_upload_wear_round: false,
      # skip_upload_wear_round_landscape: false,
      # skip_upload_daydream: false,
      # skip_upload_daydream_landscape: false,
      # skip_upload_car: false,
      # skip_upload_car_landscape: false,
      # skip_upload_car_card: false,
      # skip_upload_car_card_landscape: false,
      # skip_upload_promo_video: false,
      # skip_upload_promo_video_480: false,
      # skip_upload_promo_video_720: false,
      # skip_upload_promo_video_1080: false,
      # skip_upload_promo_video_4k: false,
      # skip_upload_promo_video_4k_2: false,
      # skip_upload_promo_video_4k_3: false,
      # skip_upload_promo_video_4k_4: false,
      # skip_upload_promo_video_4k_5: false,
      # skip_upload_promo_video_4k_6: false,
      # skip_upload_promo_video_4k_7: false,
      # skip_upload_promo_video_4k_8: false,
      # skip_upload_promo_video_4k_9: false,
      # skip_upload_promo_video_4k_10: false,
      # skip_upload_promo_video_4k_11: false,
      # skip_upload_promo_video_4k_12: false,
      # skip_upload_promo_video_4k_13: false,
      version_code: version_code

    )
  end


  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
  # promoto to production
  desc "Promote a new version to the Google Play"
  lane :promote do
    version_codes = google_play_track_version_codes(track: "internal")
    version_code = version_codes.first
    # gradle(task: "clean assembleRelease")
    upload_to_play_store(
      track: "internal",
      skip_upload_images: true,
      skip_upload_screenshots: true,
      track_promote_to: "production",
      version_code: version_code
    )
  end

  # upload to internal as well as production
  desc "First Upload to Internal and then Production"
  lane :promote do
    internal
    promote
  end
end
